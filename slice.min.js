!function e(t,r,s){function n(c,o){if(!r[c]){if(!t[c]){var a="function"==typeof require&&require;if(!o&&a)return a(c,!0);if(i)return i(c,!0);var h=new Error("Cannot find module '"+c+"'");throw h.code="MODULE_NOT_FOUND",h}var u=r[c]={exports:{}};t[c][0].call(u.exports,(function(e){return n(t[c][1][e]||e)}),u,u.exports,e,t,r,s)}return r[c].exports}for(var i="function"==typeof require&&require,c=0;c<s.length;c++)n(s[c]);return n}({1:[function(e,t,r){window.sliceGeometry=e("./slice.js")(window.THREE)},{"./slice.js":3}],2:[function(e,t,r){function s(e){return e.forEach((function(t,r){e.forEach((function(r,s){var o=function(e,t){return e!==t&&(n(e)===i(t)?(e.unshift.apply(e,t),!0):n(e)===n(t)?(c(t),e.unshift.apply(e,t),!0):i(e)===n(t)?(e.push.apply(e,t),!0):i(e)===i(t)&&(c(t),e.push.apply(e,t),!0))}(t,r);if(o)return delete e[s],!0}))})),!1}function n(e){return e[0][0]}function i(e){return e[e.length-1][1]}function c(e){e.reverse(),e.forEach((function(e){e.reverse()}))}function o(e){return n(e)===i(e)?1:0}t.exports=function(e){return function(e){changes=!0;for(var t=e.map((function(e){return[e]}));changes;)changes=s(t);return t=t.filter((function(e){return e.length}))}(e).filter(o).map((function(e){return e.map((function(e){return e[0]}))}))}},{}],3:[function(e,t,r){var s=e("./faces-from-edges.js");t.exports=function(e){"use strict";var t="front",r="back",n=["a","b","c"],i=function(e,t,r){this.sourceGeometry=e,this.targetGeometry=t,this.slicePlane=r,this.addedVertices=[],this.addedIntersections=[],this.newEdges=[[]]};return i.prototype.startFace=function(e){this.sourceFaceIndex=e,this.sourceFace=this.sourceGeometry.faces[e],this.sourceFaceUvs=this.sourceGeometry.faceVertexUvs[0][e],this.faceIndices=[],this.faceNormals=[],this.faceUvs=[]},i.prototype.endFace=function(){var e=this.faceIndices.map((function(e,t){return t}));this.addFace(e)},i.prototype.closeHoles=function(){s(this.newEdges).forEach((function(e){this.faceNormal(e).dot(this.slicePlane.normal)>.5&&e.reverse(),this.startFace(),this.faceIndices=e,this.endFace()}),this)},i.prototype.addVertex=function(e){this.addUv(e),this.addNormal(e);var t,r=this.sourceFace[e];if(this.addedVertices.hasOwnProperty(r))t=this.addedVertices[r];else{var s=this.sourceGeometry.vertices[r];this.targetGeometry.vertices.push(s),t=this.targetGeometry.vertices.length-1,this.addedVertices[r]=t}this.faceIndices.push(t)},i.prototype.addIntersection=function(e,t,r,s){var n=Math.abs(r)/(Math.abs(r)+Math.abs(s));this.addIntersectionUv(e,t,n),this.addIntersectionNormal(e,t,n);var i,c=this.sourceFace[e],o=this.sourceFace[t],a=this.intersectionId(c,o);if(this.addedIntersections.hasOwnProperty(a))i=this.addedIntersections[a];else{var h=this.sourceGeometry.vertices[c],u=this.sourceGeometry.vertices[o],f=h.clone().lerp(u,n);this.targetGeometry.vertices.push(f),i=this.targetGeometry.vertices.length-1,this.addedIntersections[a]=i}this.faceIndices.push(i),this.updateNewEdges(i)},i.prototype.addUv=function(e){if(this.sourceFaceUvs){var t=this.keyIndex(e),r=this.sourceFaceUvs[t];this.faceUvs.push(r)}},i.prototype.addIntersectionUv=function(e,t,r){if(this.sourceFaceUvs){var s=this.keyIndex(e),n=this.keyIndex(t),i=this.sourceFaceUvs[s],c=this.sourceFaceUvs[n],o=i.clone().lerp(c,r);this.faceUvs.push(o)}},i.prototype.addNormal=function(e){if(this.sourceFace.vertexNormals.length){var t=this.keyIndex(e),r=this.sourceFace.vertexNormals[t];this.faceNormals.push(r)}},i.prototype.addIntersectionNormal=function(e,t,r){if(this.sourceFace.vertexNormals.length){var s=this.keyIndex(e),n=this.keyIndex(t),i=this.sourceFace.vertexNormals[s],c=this.sourceFace.vertexNormals[n],o=i.clone().lerp(c,r).normalize();this.faceNormals.push(o)}},i.prototype.addFace=function(e){if(3!==e.length){for(var t=[],r=0;r<e.length;r++)for(var s=r+1;s<e.length;s++){var n=Math.abs(r-s);n>1&&n<e.length-1&&t.push([e[r],e[s]])}t.sort(function(e,t){return this.faceEdgeLength(e[0],e[1])-this.faceEdgeLength(t[0],t[1])}.bind(this));var i=e.indexOf(t[0][0]),c=(e=e.slice(i).concat(e.slice(0,i))).indexOf(t[0][1]),o=e.slice(0,c+1),a=e.slice(c).concat(e.slice(0,1));this.addFace(o),this.addFace(a)}else this.addFacePart(e[0],e[1],e[2])},i.prototype.addFacePart=function(t,r,s){var n=null;this.faceNormals.length&&(n=[this.faceNormals[t],this.faceNormals[r],this.faceNormals[s]]);var i=new e.Face3(this.faceIndices[t],this.faceIndices[r],this.faceIndices[s],n);this.targetGeometry.faces.push(i),this.sourceFaceUvs&&this.targetGeometry.faceVertexUvs[0].push([this.faceUvs[t],this.faceUvs[r],this.faceUvs[s]])},i.prototype.faceEdgeLength=function(e,t){var r=this.faceIndices[e],s=this.faceIndices[t],n=this.targetGeometry.vertices[r],i=this.targetGeometry.vertices[s];return n.distanceToSquared(i)},i.prototype.intersectionId=function(e,t){return[e,t].sort().join(",")},i.prototype.keyIndex=function(e){return n.indexOf(e)},i.prototype.updateNewEdges=function(e){var t=this.newEdges.length-1,r=this.newEdges[t];r.length<2?r.push(e):this.newEdges.push([e])},i.prototype.faceNormal=function(e){var t=e.map(function(e){return this.targetGeometry.vertices[e]}.bind(this)),r=t[0].clone().sub(t[1]),s=t[0].clone().sub(t[2]);return r.cross(s).normalize()},function(s,c,o){var a=new e.Geometry,h=new i(s,a,c),u=[],f=[];return s.vertices.forEach((function(e){var s=function(e,t){return t.distanceToPoint(e)}(e,c),n=function(e){return e<0?r:e>0?t:"on"}(s);u.push(s),f.push(n)})),s.faces.forEach((function(e,s){var i=n.map((function(t){return f[e[t]]}));if(-1!==i.indexOf(t)||-1===i.indexOf(r)){h.startFace(s);var c=n[n.length-1],o=e[c],a=u[o],d=f[o];n.map((function(s){var n=e[s],i=u[n],p=f[n];p===t&&(d===r?(h.addIntersection(c,s,a,i),h.addVertex(s)):h.addVertex(s)),"on"===p&&h.addVertex(s),p===r&&d===t&&h.addIntersection(c,s,a,i),c=s,o=n,d=p,a=i})),h.endFace()}})),o&&h.closeHoles(),a}}},{"./faces-from-edges.js":2}]},{},[1]);